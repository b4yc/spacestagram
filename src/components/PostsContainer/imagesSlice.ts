import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { Image } from "../../shared/interfaces";
import { fetchImages } from "./imagesApi";

interface Page {
  number: number;
  images: Image[];
}

export interface ImagesState {
  data: {
    activePage: number;
    pagesData: Page[];
  };
  status: "idle" | "loading" | "failed";
}

const initialState: ImagesState = {
  data: {
    activePage: 0,
    pagesData: [],
  },
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchImagesAsync = createAsyncThunk(
  "images/fetchImages",
  async (page: number) => {
    const response = await fetchImages(page);
    return response;
  }
);

export const imagesSlice = createSlice({
  name: "images",
  initialState,
  reducers: {
    addPageData: (state, action: PayloadAction<Page>) => {
      state.data.pagesData = [...state.data.pagesData, action.payload];
    },
    setActivePage: (state, action: PayloadAction<number>) => {
      state.data.activePage = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchImagesAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchImagesAsync.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(fetchImagesAsync.fulfilled, (state) => {
        state.status = "idle";
      });
  },
});

export const { addPageData, setActivePage } = imagesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPages = (state: RootState) => state.images.data.pagesData;
export const selectActivePage = (state: RootState) =>
  state.images.data.activePage;
export const selectStatus = (state: RootState) => state.images.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default imagesSlice.reducer;
