{"version":3,"sources":["assets/empty.png","assets/failed.png","assets/logo.svg","app/hooks.ts","shared/likedPostsSlice.ts","components/Post/Post.tsx","components/PostsContainer/imagesApi.ts","components/PostsContainer/imagesSlice.ts","components/PostsContainer/PostsContainer.tsx","components/Skeleton/Skeleton.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","data","JSON","parse","localStorage","getItem","authMiddleware","getState","next","action","result","addLikedPost","match","removeLikedPost","setItem","stringify","likedPosts","likedPostsSlice","createSlice","name","reducers","state","imageToAdd","some","image","url","addPostToLikedPosts","payload","imageToRemove","filter","removePostFromLikedPosts","actions","selectLikedPosts","Post","dispatch","descriptionOpen","setDescriptionOpen","useState","isLiked","setIsLiked","toastActive","setToastActive","toastMessage","setToastMessage","formattedDate","setFormattedDate","useEffect","date","Date","toLocaleString","month","getUTCDate","getUTCFullYear","likedPost","toggleToastActive","useCallback","handleDescriptionToggle","open","style","margin","Card","sectioned","alt","width","height","objectFit","objectPosition","src","padding","display","flexDirection","justifyContent","Heading","title","ButtonGroup","segmented","Button","onClick","navigator","clipboard","writeText","accessibilityLabel","icon","ShareMinor","data-testid","pressed","HeartMajor","Collapsible","id","transition","duration","timingFunction","expandOnPrint","TextContainer","description","ariaExpanded","ariaControls","ChevronUpMinor","ChevronDownMinor","plain","fullWidth","Toast","content","onDismiss","convertPageToStartDate","page","startDate","setDate","getDate","toISOString","split","convertPageToEndDate","endDate","fetchImages","axios","get","params","api_key","process","thumbs","start_date","end_date","fetchImagesAsync","createAsyncThunk","a","response","imagesSlice","activePage","pagesData","status","addPageData","pageToAdd","number","addPageIfUnique","setActivePage","extraReducers","builder","addCase","pending","rejected","fulfilled","selectPages","images","selectActivePage","selectStatus","PostsContainer","selectedTabId","activeExplorePage","unwrap","then","res","map","explanation","media_type","thumbnail_url","catch","console","log","EmptyState","heading","failedImage","find","key","Pagination","hasPrevious","onPrevious","window","scrollTo","top","behavior","hasNext","onNext","length","emptyImage","Skeleton","SkeletonPage","narrowWidth","Tabs","tabs","selected","fitted","Array","fill","_","index","Section","SkeletonThumbnail","size","SkeletonDisplayText","SkeletonBodyText","lines","panelID","App","selectedTab","setSelectedTab","handleTabChange","selectedTabIndex","Page","logo","cursor","location","reload","Frame","onSelect","store","configureStore","reducer","imagesReducer","likedPostsReducer","middleware","getDefaultMiddleware","serializableCheck","concat","Boolean","hostname","ReactDOM","render","StrictMode","AppProvider","i18n","enTranslations","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.48803b16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty.2366730f.png\";","module.exports = __webpack_public_path__ + \"static/media/failed.54d42a45.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.394bdb03.svg\";","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../app/store\";\nimport { Image } from \"./interfaces\";\n\n/**\n * This slice of state stores the date of liked posts in an array.\n * Assume url is unique and is used as a key\n */\nexport interface LikedPostsState {\n  data: Image[];\n}\n\nconst initialState: LikedPostsState = {\n  data: JSON.parse(localStorage.getItem(\"likedPosts\") || \"[]\") || [],\n};\n\nexport const authMiddleware =\n  ({ getState }: any) =>\n  (next: any) =>\n  (action: any) => {\n    const result = next(action);\n    if (addLikedPost.match(action) || removeLikedPost.match(action)) {\n      localStorage.setItem(\n        \"likedPosts\",\n        JSON.stringify([...getState().likedPosts.data])\n      );\n    }\n    return result;\n  };\n\nexport const likedPostsSlice = createSlice({\n  name: \"likedPosts\",\n  initialState,\n  reducers: {\n    // add a single image to array of liked posts\n    addLikedPost: (state, action: PayloadAction<Image>) => {\n      state.data = addPostToLikedPosts(state, action.payload);\n    },\n    // remove a single image from array of liked posts\n    removeLikedPost: (state, action: PayloadAction<Image>) => {\n      state.data = removePostFromLikedPosts(state, action.payload);\n    },\n  },\n});\n\nexport const { addLikedPost, removeLikedPost } = likedPostsSlice.actions;\n\n// selector of array of liked posts\nexport const selectLikedPosts = (state: RootState) => state.likedPosts.data;\n\n/**\n * Helper function to add image to state if image has not already been liked\n * @param state the state of the likedPostsSlice\n * @param date the date of the image to be added\n * @returns the new state of likedPostsSlice\n */\nfunction addPostToLikedPosts(\n  state: LikedPostsState,\n  imageToAdd: Image\n): Image[] {\n  return state.data?.some((image) => image.url === imageToAdd.url)\n    ? [...state.data]\n    : [...state.data, imageToAdd];\n}\n\n/**\n * Helper function to remove image from state if image has been liked\n * @param state the state of the likedPostsSlice\n * @param date the date of the image to be added\n * @returns the new state of likedPostsSlice\n */\nfunction removePostFromLikedPosts(\n  state: LikedPostsState,\n  imageToRemove: Image\n): Image[] {\n  return state.data.filter((image) => image.url !== imageToRemove.url);\n}\n\nexport default likedPostsSlice.reducer;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport {\n  Card,\n  Button,\n  Heading,\n  Collapsible,\n  TextContainer,\n  Toast,\n  ButtonGroup,\n} from \"@shopify/polaris\";\nimport { Image } from \"../../shared/interfaces\";\nimport {\n  ChevronDownMinor,\n  ChevronUpMinor,\n  ShareMinor,\n  HeartMajor,\n} from \"@shopify/polaris-icons\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport {\n  addLikedPost,\n  removeLikedPost,\n  selectLikedPosts,\n} from \"../../shared/likedPostsSlice\";\n\nexport default function Post({ image }: { image: Image }) {\n  const dispatch = useAppDispatch();\n  const likedPosts = useAppSelector(selectLikedPosts);\n  const [descriptionOpen, setDescriptionOpen] = useState(false);\n  const [isLiked, setIsLiked] = useState(false);\n  const [toastActive, setToastActive] = useState(false);\n  const [toastMessage, setToastMessage] = useState(\"\");\n  const [formattedDate, setFormattedDate] = useState(\"\");\n\n  useEffect(() => {\n    const date = new Date(image.date);\n    setFormattedDate(\n      `${date.toLocaleString(\"default\", { month: \"short\" })} \n      ${date.getUTCDate()},\n      ${date.getUTCFullYear()}`\n    );\n  }, [image.date]);\n\n  useEffect(() => {\n    setIsLiked(\n      likedPosts.some((likedPost) => likedPost.url === image.url) ? true : false\n    );\n  }, [likedPosts]);\n\n  const toggleToastActive = useCallback(\n    () => setToastActive((toastActive) => !toastActive),\n    []\n  );\n\n  const handleDescriptionToggle = useCallback(\n    () => setDescriptionOpen((open) => !open),\n    []\n  );\n\n  function handleLikeToggle() {\n    if (isLiked) {\n      setToastMessage(\"Removed from Favourites\");\n      dispatch(removeLikedPost(image));\n    } else {\n      setToastMessage(\"Added to Favourites\");\n      dispatch(addLikedPost(image));\n    }\n    setToastActive(true);\n  }\n\n  return (\n    <div style={{ margin: \"16px\" }}>\n      <Card sectioned>\n        <img\n          alt={\"APOD image of \" + image.date}\n          width=\"100%\"\n          height=\"100%\"\n          style={{\n            objectFit: \"cover\",\n            objectPosition: \"center\",\n          }}\n          src={image.url}\n        />\n        <div\n          style={{\n            padding: \"1rem 0\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <div>\n            <Heading>{image.title}</Heading>\n            <p>{formattedDate}</p>\n          </div>\n          <ButtonGroup segmented>\n            <Button\n              onClick={() => {\n                setToastMessage(\"URL Copied to Clipboard\");\n                setToastActive(true);\n                navigator.clipboard.writeText(image.url);\n              }}\n              accessibilityLabel=\"Copy url to clipboard\"\n              icon={ShareMinor}\n              data-testid=\"share-button\"\n            ></Button>\n            <Button\n              onClick={handleLikeToggle}\n              accessibilityLabel={isLiked ? \"Unlike post\" : \"Like post\"}\n              pressed={isLiked}\n              icon={HeartMajor}\n              data-testid=\"like-button\"\n            ></Button>\n          </ButtonGroup>\n        </div>\n\n        <Collapsible\n          open={descriptionOpen}\n          id=\"collapsible-description\"\n          transition={{ duration: \"500ms\", timingFunction: \"ease-in-out\" }}\n          expandOnPrint\n        >\n          <TextContainer>\n            <p>{image.description}</p>\n          </TextContainer>\n        </Collapsible>\n        <Button\n          onClick={handleDescriptionToggle}\n          accessibilityLabel={\n            descriptionOpen ? \"Collapse description\" : \"Expand description\"\n          }\n          ariaExpanded={descriptionOpen}\n          ariaControls=\"collapsible-description\"\n          icon={descriptionOpen ? ChevronUpMinor : ChevronDownMinor}\n          plain\n          fullWidth\n        />\n      </Card>\n\n      {toastActive ? (\n        <Toast content={toastMessage} onDismiss={toggleToastActive} />\n      ) : null}\n    </div>\n  );\n}\n","import axios from \"axios\";\n\n/**\n * constant for the number of images per page that the app allows\n */\nexport const NUM_OF_IMAGES_PER_PAGE = 15;\n\n/**\n * helper function converting the page number to the start date of api call\n * @param page the page number\n */\nfunction convertPageToStartDate(page: number): string {\n  let startDate = new Date();\n  startDate.setDate(\n    startDate.getDate() -\n      page * NUM_OF_IMAGES_PER_PAGE -\n      NUM_OF_IMAGES_PER_PAGE +\n      1\n  );\n  return startDate.toISOString().split(\"T\")[0];\n}\n\n/**\n * helper function converting the page number to the end date of api call\n * @param page the page number\n */\nfunction convertPageToEndDate(page: number): string {\n  let endDate = new Date();\n\n  endDate.setDate(endDate.getDate() - page * NUM_OF_IMAGES_PER_PAGE);\n  return endDate.toISOString().split(\"T\")[0];\n}\n\n/**\n * Each call will retrieve 10 days of images\n * @param page the page number the user wants to retrieve. Note that page number starts at 0\n * @returns the nasa api call result. The result requires further processing for error checking.\n */\nexport function fetchImages(page: number = 0) {\n  return axios.get(`https://api.nasa.gov/planetary/apod`, {\n    params: {\n      api_key: process.env.REACT_APP_NASA_API_KEY,\n      thumbs: true,\n      start_date: convertPageToStartDate(page),\n      end_date: convertPageToEndDate(page),\n    },\n  });\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { Image } from \"../../shared/interfaces\";\nimport { fetchImages } from \"./imagesApi\";\n\ninterface Page {\n  number: number;\n  images: Image[];\n}\n\nexport interface ImagesState {\n  data: {\n    activePage: number;\n    pagesData: Page[];\n  };\n  status: \"idle\" | \"loading\" | \"failed\";\n}\n\nexport const initialState: ImagesState = {\n  data: {\n    activePage: 0,\n    pagesData: [],\n  },\n  status: \"idle\",\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const fetchImagesAsync = createAsyncThunk(\n  \"images/fetchImages\",\n  async (page: number) => {\n    const response = await fetchImages(page);\n    return response;\n  }\n);\n\nexport const imagesSlice = createSlice({\n  name: \"images\",\n  initialState,\n  reducers: {\n    addPageData: (state, action: PayloadAction<Page>) => {\n      state.data.pagesData = addPageIfUnique(state, action.payload);\n    },\n    setActivePage: (state, action: PayloadAction<number>) => {\n      state.data.activePage = action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchImagesAsync.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchImagesAsync.rejected, (state) => {\n        state.status = \"failed\";\n      })\n      .addCase(fetchImagesAsync.fulfilled, (state) => {\n        state.status = \"idle\";\n      });\n  },\n});\n\nexport const { addPageData, setActivePage } = imagesSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectPages = (state: RootState) => state.images.data.pagesData;\nexport const selectActivePage = (state: RootState) =>\n  state.images.data.activePage;\nexport const selectStatus = (state: RootState) => state.images.status;\n\nfunction addPageIfUnique(state: ImagesState, pageToAdd: Page): Page[] {\n  if (!state.data.pagesData) return [pageToAdd];\n  return state.data.pagesData.some((page) => page.number === pageToAdd.number)\n    ? [...state.data.pagesData]\n    : [...state.data.pagesData, pageToAdd];\n}\nexport default imagesSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport { EmptyState, Pagination } from \"@shopify/polaris\";\n\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport Post from \"../Post/Post\";\nimport {\n  fetchImagesAsync,\n  selectPages,\n  selectActivePage,\n  addPageData,\n  setActivePage,\n  selectStatus,\n} from \"./imagesSlice\";\nimport { selectLikedPosts } from \"../../shared/likedPostsSlice\";\nimport emptyImage from \"../../assets/empty.png\";\nimport failedImage from \"../../assets/failed.png\";\n\ntype PostsContainerProps = {\n  selectedTabId: string;\n};\n\nexport default function PostsContainer({ selectedTabId }: PostsContainerProps) {\n  const dispatch = useAppDispatch();\n  const pagesData = useAppSelector(selectPages);\n  const activePage = useAppSelector(selectActivePage);\n  const activeExplorePage = useAppSelector(selectActivePage);\n  const likedPosts = useAppSelector(selectLikedPosts);\n  const status = useAppSelector(selectStatus);\n\n  useEffect(() => {\n    if (\n      !pagesData.some((page) => page.number === activePage) &&\n      status !== \"failed\"\n    ) {\n      dispatch(fetchImagesAsync(activePage))\n        .unwrap()\n        .then((res) => {\n          dispatch(\n            addPageData({\n              number: activePage,\n              images: res.data.map((image: any) => {\n                return {\n                  title: image.title,\n                  date: image.date,\n                  description: image.explanation,\n                  url:\n                    image.media_type === \"video\"\n                      ? image.thumbnail_url\n                      : image.url,\n                };\n              }),\n            })\n          );\n        })\n        .catch((res) => {\n          console.log(\"Error occurred\", res);\n        });\n    }\n  });\n\n  return (\n    <>\n      {selectedTabId === \"explore\" ? (\n        status === \"failed\" ? (\n          <div data-testid=\"error-state-page\">\n            <EmptyState\n              heading=\"Something got lost in space...\"\n              image={failedImage}\n            >\n              <p>Please try again later.</p>\n            </EmptyState>\n          </div>\n        ) : (\n          <>\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column-reverse\",\n              }}\n              data-testid=\"apod-images\"\n            >\n              {pagesData\n                .find((page) => page.number === activePage)\n                ?.images?.map((image) => (\n                  <Post image={image} key={image.url} />\n                ))}\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                padding: \"2rem\",\n              }}\n            >\n              <Pagination\n                hasPrevious={activeExplorePage > 0}\n                onPrevious={() => {\n                  dispatch(setActivePage(activeExplorePage - 1));\n                  window.scrollTo({ top: 0, behavior: \"smooth\" });\n                }}\n                hasNext\n                onNext={() => {\n                  dispatch(setActivePage(activeExplorePage + 1));\n                  window.scrollTo({ top: 0, behavior: \"smooth\" });\n                }}\n              />\n            </div>\n          </>\n        )\n      ) : likedPosts.length === 0 ? (\n        <div data-testid=\"empty-state-page\">\n          <EmptyState heading=\"There's nothing to see here\" image={emptyImage}>\n            <p>\n              Head over to the <em>Explore Recent</em> tab to start your\n              collection!\n            </p>\n          </EmptyState>\n        </div>\n      ) : (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column-reverse\",\n          }}\n          data-testid=\"liked-images\"\n        >\n          {likedPosts.map((image) => (\n            <Post image={image} key={image.url} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  Card,\n  SkeletonBodyText,\n  SkeletonDisplayText,\n  TextContainer,\n  SkeletonPage,\n  SkeletonThumbnail,\n  Tabs,\n} from \"@shopify/polaris\";\nimport { NUM_OF_IMAGES_PER_PAGE } from \"../PostsContainer/imagesApi\";\nimport { tabs } from \"../../App\";\n\nexport default function Skeleton() {\n  return (\n    <SkeletonPage title=\"\" narrowWidth>\n      <hr />\n      <Tabs tabs={tabs} selected={0} fitted></Tabs>\n      {Array(NUM_OF_IMAGES_PER_PAGE)\n        .fill(0)\n        .map((_, index) => {\n          return (\n            <div key={index} style={{ margin: \"16px\" }}>\n              <Card>\n                <Card.Section>\n                  <SkeletonThumbnail size=\"large\" />\n                  <TextContainer>\n                    <br />\n                    <SkeletonDisplayText size=\"small\" />\n                    <SkeletonBodyText lines={2} />\n                  </TextContainer>\n                </Card.Section>\n              </Card>\n            </div>\n          );\n        })}\n    </SkeletonPage>\n  );\n}\n","import React, { useCallback, useState } from \"react\";\n\nimport { Frame, Page, Tabs } from \"@shopify/polaris\";\n\nimport \"./App.css\";\nimport PostsContainer from \"./components/PostsContainer/PostsContainer\";\nimport Skeleton from \"./components/Skeleton/Skeleton\";\nimport { useAppSelector } from \"./app/hooks\";\nimport { selectStatus } from \"./components/PostsContainer/imagesSlice\";\nimport logo from \"./assets/logo.svg\";\n\nexport const tabs = [\n  {\n    id: \"explore\",\n    content: \"Explore Recent\",\n    accessibilityLabel: \"Explore Recent Page\",\n    panelID: \"explore-page-content\",\n  },\n  {\n    id: \"liked\",\n    content: \"Your Favourites\",\n    accessibilityLabel: \"Your Favourites Page\",\n    panelID: \"liked-page-content\",\n  },\n];\n\nfunction App() {\n  const status = useAppSelector(selectStatus);\n  const [selectedTab, setSelectedTab] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex) => setSelectedTab(selectedTabIndex),\n    []\n  );\n\n  return status === \"loading\" ? (\n    <Skeleton />\n  ) : (\n    <Page title=\"\" narrowWidth>\n      <img\n        src={logo}\n        alt=\"spacestagram logo\"\n        style={{\n          width: \"200px\",\n          padding: \"1rem\",\n          cursor: \"pointer\",\n        }}\n        onClick={() => {\n          window.location.reload();\n        }}\n        data-testid=\"logo\"\n      ></img>\n      <hr />\n      <Frame>\n        <Tabs\n          tabs={tabs}\n          selected={selectedTab}\n          onSelect={handleTabChange}\n          fitted\n        ></Tabs>\n        <PostsContainer selectedTabId={tabs[selectedTab].id} />\n      </Frame>\n    </Page>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport imagesReducer from \"../components/PostsContainer/imagesSlice\";\nimport likedPostsReducer from \"../shared/likedPostsSlice\";\nimport { authMiddleware } from \"../shared/likedPostsSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    images: imagesReducer,\n    likedPosts: likedPostsReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({ serializableCheck: false }).concat(authMiddleware),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AppProvider } from \"@shopify/polaris\";\nimport enTranslations from \"@shopify/polaris/locales/en.json\";\nimport \"@shopify/polaris/build/esm/styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppProvider i18n={enTranslations}>\n        <App />\n      </AppProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}